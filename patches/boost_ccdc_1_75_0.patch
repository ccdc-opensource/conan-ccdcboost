diff -u -r a/boost/smart_ptr/detail/shared_count.hpp b/boost/smart_ptr/detail/shared_count.hpp
--- a/boost/smart_ptr/detail/shared_count.hpp	2020-12-03 05:02:23.000000000 +0000
+++ b/boost/smart_ptr/detail/shared_count.hpp	2021-04-15 22:29:28.000000000 +0100
@@ -143,6 +143,9 @@
         , id_(shared_count_id)
 #endif
     {
+        // special-case code for null pointers added at CCDC:
+        if ( !p )
+            return;
 #ifndef BOOST_NO_EXCEPTIONS
 
         try
diff -u -r a/boost/smart_ptr/shared_ptr.hpp b/boost/smart_ptr/shared_ptr.hpp
--- a/boost/smart_ptr/shared_ptr.hpp	2020-12-03 05:02:23.000000000 +0000
+++ b/boost/smart_ptr/shared_ptr.hpp	2021-04-15 22:34:30.000000000 +0100
@@ -34,6 +34,7 @@
 #include <typeinfo>             // for std::bad_cast
 #include <cstddef>              // for std::size_t
 #include <memory>               // for std::auto_ptr
+#include <stdexcept>            // for std::runtime_error - added at CCDC
 
 #if !defined(BOOST_NO_IOSTREAM)
 #if !defined(BOOST_NO_IOSFWD)
@@ -43,6 +44,8 @@
 #endif
 #endif
 
+#include <ostream>              // for shared_ptr::print() - added at CCDC
+
 #if defined( BOOST_SP_DISABLE_DEPRECATED )
 #pragma GCC diagnostic push
 #pragma GCC diagnostic ignored "-Wdeprecated-declarations"
@@ -324,6 +327,17 @@
 } // namespace detail
 
 
+// Added at CCDC
+template< typename DummyType >
+class HandleCommon
+{
+public:
+    static void null_handle_error()
+    {
+        throw std::runtime_error( "Internal error: access of null handle" );
+    }
+};
+
 //
 //  shared_ptr
 //
@@ -717,21 +731,27 @@
 
 #endif
 
-    typename boost::detail::sp_dereference< T >::type operator* () const BOOST_SP_NOEXCEPT_WITH_ASSERT
+    typename boost::detail::sp_dereference< T >::type operator* () const // Modified at CCDC to throw std::runtime_error for null pointers
     {
-        BOOST_ASSERT( px != 0 );
+        //BOOST_ASSERT( px != 0 );
+        if ( px == 0 )
+            HandleCommon<int>::null_handle_error();
         return *px;
     }
     
-    typename boost::detail::sp_member_access< T >::type operator-> () const BOOST_SP_NOEXCEPT_WITH_ASSERT
+    typename boost::detail::sp_member_access< T >::type operator-> () const // Modified at CCDC to throw std::runtime_error for null pointers
     {
-        BOOST_ASSERT( px != 0 );
+        //BOOST_ASSERT( px != 0 );
+        if ( px == 0 )
+            HandleCommon<int>::null_handle_error();
         return px;
     }
     
-    typename boost::detail::sp_array_access< T >::type operator[] ( std::ptrdiff_t i ) const BOOST_SP_NOEXCEPT_WITH_ASSERT
+    typename boost::detail::sp_array_access< T >::type operator[] ( std::ptrdiff_t i ) const  // Modified at CCDC to throw std::runtime_error for null pointers
     {
-        BOOST_ASSERT( px != 0 );
+        //BOOST_ASSERT( px != 0 );
+        if ( px == 0 )
+            HandleCommon<int>::null_handle_error();
         BOOST_ASSERT( i >= 0 && ( i < boost::detail::sp_extent< T >::value || boost::detail::sp_extent< T >::value == 0 ) );
 
         return static_cast< typename boost::detail::sp_array_access< T >::type >( px[ i ] );
@@ -811,6 +831,16 @@
         return pn;
     }
 
+    // Added at CCDC
+    std::ostream& print(std::ostream& os) const
+    {
+        if ( px == 0 )
+            os << "<zero handle>";
+        else
+            os << *px;
+        return os;
+    }
+
 // Tasteless as this may seem, making all members public allows member templates
 // to work in the absence of member template friends. (Matthew Langston)
 
@@ -983,8 +1013,9 @@
 
 template<class Y> std::ostream & operator<< (std::ostream & os, shared_ptr<Y> const & p)
 {
-    os << p.get();
-    return os;
+    // Changed at CCDC to print out the object that is pointed to:
+    //os << p.get();
+    return p.print(os);
 }
 
 #else
@@ -1000,8 +1031,9 @@
 template<class E, class T, class Y> std::basic_ostream<E, T> & operator<< (std::basic_ostream<E, T> & os, shared_ptr<Y> const & p)
 # endif
 {
-    os << p.get();
-    return os;
+    // Changed at CCDC to print out the object that is pointed to:
+    //os << p.get();
+    return p.print(os);
 }
 
 #endif // _STLP_NO_IOSTREAMS
